# Generated by Django 5.0.1 on 2024-01-12 12:58

import django.contrib.postgres.constraints
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import kitamanager.models.common
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("kitamanager", "0001_postgres_extensions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Child",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("birth_date", models.DateField()),
                ("comment", models.TextField(blank=True, help_text="optional comment")),
                (
                    "voucher",
                    models.CharField(help_text="the voucher identifier", max_length=255),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChildContract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="start date for the contract")),
                ("end", models.DateField(help_text="end date for the contract")),
                (
                    "pay_tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        help_text="list of comma separated payment properties. Those must match the payment plan",
                        size=None,
                    ),
                ),
            ],
            options={
                "ordering": ["person", "start"],
                "get_latest_by": ["start"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChildPaymentPlan",
            fields=[
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-name",),
            },
        ),
        migrations.CreateModel(
            name="ChildPaymentTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="start date")),
                ("end", models.DateField(help_text="end date")),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["plan", "-start"],
                "get_latest_by": ["start"],
            },
        ),
        migrations.CreateModel(
            name="ChildPaymentTableEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "age",
                    django.contrib.postgres.fields.ranges.IntegerRangeField(
                        help_text="age (in years) range for this property",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                ("name", models.CharField(help_text="property name", max_length=255)),
                (
                    "pay",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="imcoming pay (in Euro) to get for this property",
                        max_digits=10,
                    ),
                ),
                (
                    "requirement",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="required employees in % (eg. 0.5 means half a person)",
                        max_digits=10,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("table", "age", "name"),
            },
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("birth_date", models.DateField()),
                ("comment", models.TextField(blank=True, help_text="optional comment")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EmployeeContract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="start date for the contract")),
                ("end", models.DateField(help_text="end date for the contract")),
                (
                    "pay_group",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="pay group",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "pay_level",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="pay level",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "hours_child",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("37.0"),
                        help_text="working hours per week (children)",
                        max_digits=4,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "hours_management",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="working hours per week (management)",
                        max_digits=4,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "hours_team",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("2"),
                        help_text="working hours per week (team)",
                        max_digits=4,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "hours_misc",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="working hours per week (miscellaneous)",
                        max_digits=4,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
            ],
            options={
                "ordering": ["person", "start"],
                "get_latest_by": ["start"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EmployeePaymentPlan",
            fields=[
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-name",),
            },
        ),
        migrations.CreateModel(
            name="EmployeePaymentTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="start date for entry")),
                ("end", models.DateField(help_text="end date for entry")),
                (
                    "hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=39.0,
                        help_text="weekly working hours",
                        max_digits=4,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["plan", "-start"],
                "get_latest_by": ["start"],
            },
        ),
        migrations.CreateModel(
            name="EmployeePaymentTableEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pay_group",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="pay group",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "pay_level",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="pay level",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "salary",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="monthly salary",
                        max_digits=8,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-pay_group", "-pay_level"),
            },
        ),
        migrations.CreateModel(
            name="EmployeeQualification",
            fields=[
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-name",),
            },
        ),
        migrations.CreateModel(
            name="RevenueEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="start date")),
                ("end", models.DateField(help_text="end date")),
                (
                    "pay",
                    models.DecimalField(decimal_places=2, help_text="pay (in Euro)", max_digits=10),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["name", "-start"],
                "get_latest_by": ["start"],
            },
        ),
        migrations.CreateModel(
            name="RevenueName",
            fields=[
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-name",),
            },
        ),
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "name",
                    models.CharField(
                        help_text="name of the area",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "educational",
                    models.BooleanField(help_text="is this area educational (so an educator, not eg. a cook) ?"),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-name",),
                "indexes": [
                    models.Index(
                        fields=["name", "educational"],
                        name="kitamanager_name_df710e_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="BankAccount",
            fields=[
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("-name",),
                "indexes": [models.Index(fields=["name"], name="kitamanager_name_8dfc24_idx")],
            },
        ),
        migrations.CreateModel(
            name="BankAccountEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="start date for entry")),
                ("end", models.DateField(help_text="end date for entry")),
                (
                    "balance",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="bank account balance",
                        max_digits=10,
                    ),
                ),
                (
                    "bankaccount",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="kitamanager.bankaccount",
                    ),
                ),
            ],
            options={
                "ordering": ("bankaccount", "-start"),
                "get_latest_by": ["start"],
            },
        ),
        migrations.AddConstraint(
            model_name="child",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name", "birth_date"),
                name="kitamanager_child_first_name_last_name_birth_date",
            ),
        ),
        migrations.AddField(
            model_name="childcontract",
            name="area",
            field=models.ForeignKey(
                help_text="area where the person is",
                on_delete=django.db.models.deletion.CASCADE,
                to="kitamanager.area",
            ),
        ),
        migrations.AddField(
            model_name="childcontract",
            name="person",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contracts",
                to="kitamanager.child",
            ),
        ),
        migrations.AddIndex(
            model_name="childpaymentplan",
            index=models.Index(fields=["name"], name="kitamanager_name_ca2153_idx"),
        ),
        migrations.AddField(
            model_name="childcontract",
            name="pay_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pay_plans",
                to="kitamanager.childpaymentplan",
            ),
        ),
        migrations.AddField(
            model_name="childpaymenttable",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tables",
                to="kitamanager.childpaymentplan",
            ),
        ),
        migrations.AddField(
            model_name="childpaymenttableentry",
            name="table",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="entries",
                to="kitamanager.childpaymenttable",
            ),
        ),
        migrations.AddConstraint(
            model_name="employee",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name", "birth_date"),
                name="kitamanager_employee_first_name_last_name_birth_date",
            ),
        ),
        migrations.AddField(
            model_name="employeecontract",
            name="area",
            field=models.ForeignKey(
                help_text="area where the person is",
                on_delete=django.db.models.deletion.CASCADE,
                to="kitamanager.area",
            ),
        ),
        migrations.AddField(
            model_name="employeecontract",
            name="person",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contracts",
                to="kitamanager.employee",
            ),
        ),
        migrations.AddIndex(
            model_name="employeepaymentplan",
            index=models.Index(fields=["name"], name="kitamanager_name_b536cc_idx"),
        ),
        migrations.AddField(
            model_name="employeecontract",
            name="pay_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pay_plans",
                to="kitamanager.employeepaymentplan",
            ),
        ),
        migrations.AddField(
            model_name="employeepaymenttable",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tables",
                to="kitamanager.employeepaymentplan",
            ),
        ),
        migrations.AddField(
            model_name="employeepaymenttableentry",
            name="table",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="entries",
                to="kitamanager.employeepaymenttable",
            ),
        ),
        migrations.AddIndex(
            model_name="employeequalification",
            index=models.Index(fields=["name"], name="kitamanager_name_e360e0_idx"),
        ),
        migrations.AddField(
            model_name="employeecontract",
            name="qualification",
            field=models.ForeignKey(
                help_text="qualification the employee has",
                on_delete=django.db.models.deletion.CASCADE,
                to="kitamanager.employeequalification",
            ),
        ),
        migrations.AddIndex(
            model_name="revenuename",
            index=models.Index(fields=["name"], name="kitamanager_name_07f029_idx"),
        ),
        migrations.AddField(
            model_name="revenueentry",
            name="name",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="entries",
                to="kitamanager.revenuename",
            ),
        ),
        migrations.AddIndex(
            model_name="bankaccountentry",
            index=models.Index(fields=["start", "end", "balance"], name="kitamanager_start_b9b0a4_idx"),
        ),
        migrations.AddConstraint(
            model_name="bankaccountentry",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        kitamanager.models.common.DateRange(
                            "start",
                            "end",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                    ("bankaccount", "="),
                ],
                name="kitamanager_bankaccountentry_exclude_bankaccount_start_end_overlap",
            ),
        ),
        migrations.AddConstraint(
            model_name="childcontract",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        kitamanager.models.common.DateRange(
                            "start",
                            "end",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                    ("person", "="),
                ],
                name="kitamanager_childcontract_exclude_person_start_end_overlap",
            ),
        ),
        migrations.AddIndex(
            model_name="childpaymenttable",
            index=models.Index(fields=["start", "end"], name="kitamanager_start_d3fcfd_idx"),
        ),
        migrations.AddConstraint(
            model_name="childpaymenttable",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        kitamanager.models.common.DateRange(
                            "start",
                            "end",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                    ("plan", "="),
                ],
                name="kitamanager_childpaymenttable_exclude_plan_start_date_overlap",
            ),
        ),
        migrations.AddIndex(
            model_name="childpaymenttableentry",
            index=models.Index(
                fields=["age", "name", "pay", "requirement"],
                name="kitamanager_age_c3e652_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="childpaymenttableentry",
            constraint=models.UniqueConstraint(
                fields=("table", "age", "name"),
                name="kitamanager_childpaymenttableentry_table_age_name",
            ),
        ),
        migrations.AddIndex(
            model_name="employeepaymenttable",
            index=models.Index(fields=["start", "end", "hours"], name="kitamanager_start_695e21_idx"),
        ),
        migrations.AddConstraint(
            model_name="employeepaymenttable",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        kitamanager.models.common.DateRange(
                            "start",
                            "end",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                    ("plan", "="),
                ],
                name="kitamanager_employeepaymenttable_exclude_plan_date_overlap",
            ),
        ),
        migrations.AddIndex(
            model_name="employeepaymenttableentry",
            index=models.Index(
                fields=["pay_group", "pay_level", "salary"],
                name="kitamanager_pay_gro_7aa7ee_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="employeepaymenttableentry",
            constraint=models.UniqueConstraint(
                fields=("table", "pay_group", "pay_level"),
                name="kitamanager_employeepaymenttableentry_table_paygroup_paylevel",
            ),
        ),
        migrations.AddConstraint(
            model_name="employeecontract",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        kitamanager.models.common.DateRange(
                            "start",
                            "end",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                    ("person", "="),
                ],
                name="kitamanager_employeecontract_exclude_person_start_end_overlap",
            ),
        ),
        migrations.AddIndex(
            model_name="revenueentry",
            index=models.Index(fields=["start", "end"], name="kitamanager_start_7186e0_idx"),
        ),
        migrations.AddConstraint(
            model_name="revenueentry",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        kitamanager.models.common.DateRange(
                            "start",
                            "end",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                    ("name", "="),
                ],
                name="kitamanager_revenueentry_exclude_name_start_date_overlap",
            ),
        ),
    ]
